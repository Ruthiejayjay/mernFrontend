{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruthi\\\\source\\\\react\\\\mernFrontend\\\\FrontendApp\\\\src\\\\places\\\\pages\\\\UpdatePlace.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Input from '../../shared/components/FormElement/Input';\nimport Button from '../../shared/components/FormElement/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validator';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport Card from '../../shared/components/UIElements/Card';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './PlaceForm.css';\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const history = useHistory();\n  const placeId = useParams().placeId;\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData({\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      await sendRequest(`http://localhost:5000/api/places/${placeId}`, 'PATCH', JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value\n      }), {\n        'Content-Type': 'application/json'\n      });\n      history.push('/' + auth.userId + '/places');\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  if (!loadedPlace && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, \"Could not find place!\")));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), !isLoading && loadedPlace && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 43\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.title,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.description,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, \"UPDATE PLACE\")));\n};\n\nexport default UpdatePlace;","map":{"version":3,"names":["React","useEffect","useState","useContext","useParams","useHistory","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","LoadingSpinner","ErrorModal","useForm","Card","useHttpClient","AuthContext","UpdatePlace","auth","isLoading","error","sendRequest","clearError","loadedPlace","setLoadedPlace","history","placeId","formState","inputHandler","setFormData","title","value","isValid","description","fetchPlace","responseData","place","err","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","push","userId"],"sources":["C:/Users/ruthi/source/react/mernFrontend/FrontendApp/src/places/pages/UpdatePlace.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElement/Input';\r\nimport Button from '../../shared/components/FormElement/Button';\r\nimport {\r\n    VALIDATOR_REQUIRE,\r\n    VALIDATOR_MINLENGTH\r\n} from '../../shared/util/validator';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlaceForm.css';\r\n\r\n\r\n\r\nconst UpdatePlace = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [loadedPlace, setLoadedPlace] = useState();\r\n    const history = useHistory();\r\n    const placeId = useParams().placeId;\r\n\r\n\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            title: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            description: {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n    useEffect(() => {\r\n        const fetchPlace = async () => {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `http://localhost:5000/api/places/${placeId}`\r\n                );\r\n                setLoadedPlace(responseData.place);\r\n                setFormData(\r\n                    {\r\n                        title: {\r\n                            value: responseData.place.title,\r\n                            isValid: true\r\n                        },\r\n                        description: {\r\n                            value: responseData.place.description,\r\n                            isValid: true\r\n                        }\r\n                    },\r\n                    true\r\n                );\r\n\r\n            } catch (err) { }\r\n        };\r\n        fetchPlace()\r\n    }, [sendRequest, placeId, setFormData])\r\n\r\n\r\n\r\n\r\n    const placeUpdateSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        try {\r\n            await sendRequest(\r\n                `http://localhost:5000/api/places/${placeId}`,\r\n                'PATCH',\r\n                JSON.stringify({\r\n                    title: formState.inputs.title.value,\r\n                    description: formState.inputs.description.value\r\n                }),\r\n                {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            );\r\n            history.push('/' + auth.userId + '/places');\r\n        } catch (err) {}\r\n    };\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!loadedPlace && !error) {\r\n        return (\r\n            <div className=\"center\">\r\n                <Card>\r\n                    <h2>Could not find place!</h2>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            {!isLoading && loadedPlace && <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\r\n                <Input\r\n                    id=\"title\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Title\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Please enter a valid title.\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedPlace.title}\r\n                    initialValid={true}\r\n                />\r\n                <Input\r\n                    id=\"description\"\r\n                    element=\"textarea\"\r\n                    label=\"Description\"\r\n                    validators={[VALIDATOR_MINLENGTH(5)]}\r\n                    errorText=\"Please enter a valid description (min. 5 characters).\"\r\n                    onInput={inputHandler}\r\n                    initialValue={loadedPlace.description}\r\n                    initialValid={true}\r\n                />\r\n                <Button type=\"submit\" disabled={!formState.isValid}>\r\n                    UPDATE PLACE\r\n                </Button>\r\n            </form>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UpdatePlace;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}